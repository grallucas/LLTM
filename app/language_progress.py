import random
import llm
import json

'''
Class to track the user's progress through the initial list of words
Getting a new word removes it from the vocab list and adds it to a known list
New words after list is exhausted are generated by LLM (TODO VALIDATE)
Note: words in list should match with the passed language
'''
class language_progress():
    def __init__(self, intro_words : list, language : str):
        self.language = language
        self.intro_words = list(set(intro_words)) #no duplicates
        self.known_words = [] #keep track of words that have been learned
    
    def get_new_word(self) -> str:
        if (len(self.intro_words) != 0):
            #remove from list and return
            # index = random.randint(0, len(self.intro_words) - 1)
            index = 0 #grab from top
            word = self.intro_words[index]
            self.intro_words.remove(word)
            self.known_words.append(word)
            return word
        else:
            #llm to randomly generate a new word that isn't in known_words
            #TODO will this be helpful/accurate? (TEST)
            l = llm.LLM(f'You are a helpful assistant. You are a list of known {self.language} words and '
                        'determine a new, appropriate word for the user to learn.')
            word = l('Come up with a new word for the user to learn. Respond the ONLY the word and NOTHING else. '
                     f'List of words: {self.known_words}')
            word = str(word).split(' ')[0] # take first word if multiple are given
            self.known_words.append(word)
            return word
        
    def add_word(self, word : str) -> None:
        self.intro_words.add(word)
        
    def serialize(self) -> str:
        return json.dumps(list(intro_words))
    
    def deserialize(self, serialized_intro_words : str, srs) -> None:
        self.known_words = list(srs.words.keys())
        self.intro_words = list(json.loads(serialized_intro_words))
            

    '''
    This method might be useful to add new looked-up words to the intro list instead of straight to review'''
    def add_new_word(self, word : str) -> None:
        self.intro_words.append(word)


# Taken from: https://duome.eu/vocabulary/en/fi/skills
intro_words = [ #TODO This should be much longer (~100)
    #basics_1
    'aina',
    'hän',
    'kaunis',
    'komea',
    'lapsi',
    'nainen',
    'velho',
    #basics_2
    'herra',
    'hiljainen',
    'hyvä',
    'ihminen',
    'kantele',
    'maa',
    'poika',
    'pöllönen',
    'rehellinen',
    'rouva',
    'sauna',
    'sisukas',
    'soitin',
    'suomalainen',
    'suomi',
    'tyttö',
    'ujo',
    'ystävä'
]